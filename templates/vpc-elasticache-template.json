{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Creates a VPC in two availability zones. Calls the elasticache-template.json nested stack.",

  "Parameters" : {

    "aTestInstanceType" : {
        "Type"                          : "String",
        "Default"                       : "m1.medium",
        "Description"                   : "Test instance type",
        "AllowedValues"                 : [ "t1.micro", "m1.medium", "m1.large" ],
        "ConstraintDescription"         : "Choose a t1.micro, m1.medium or m1.large instance type."
    },
    "bUserKeys" : {
        "Type"                          : "AWS::EC2::KeyPair::KeyName",
        "Description"                   : "Test instance SSH PEM key name."
    },
    "cSSHFrom" : {
        "Type"                          : "String",
        "Default"                       : "10.79.10.0/24",
        "Description"                   : "SSH access to the test host",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"         : "Please enter a valid CIDR range of the form x.x.x.x/x."
    },
    "dNATInstanceType" : {
        "Type"                          : "String",
        "Default"                       : "c3.2xlarge",
        "AllowedValues"                 : [ "m4.large","m4.xlarge","m4.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
        "Description"                   : "NAT instance size. Note: For enhanced networking, choose a c4, c3, r3 or i2 class instance."
    }
  },

  "Mappings" : {

    "TagConv" : {
        "Name"                          : { "VALUE" : "ecache" }
    },
    "SubnetConfig" : {
        "VPC"                           : { "CIDR" : "10.10.0.0/22" },
        "Public1"                       : { "CIDR" : "10.10.0.0/24" },
        "Public2"                       : { "CIDR" : "10.10.1.0/24" },
        "Private1"                      : { "CIDR" : "10.10.2.0/24" },
        "Private2"                      : { "CIDR" : "10.10.3.0/24" }
    },
    "RegionMap" : {
        "us-east-1"                     : { "TEST" : "ami-8e682ce6", "NAT" : "ami-4c9e4b24" },
        "eu-west-1"                     : { "TEST" : "ami-7b3db00c", "NAT" : "ami-3760b040" },
        "ap-northeast-1"                : { "TEST" : "ami-3c87993d", "NAT" : "ami-55c29e54" },
        "us-west-1"                     : { "TEST" : "ami-f49089b1", "NAT" : "ami-2b2b296e" },
        "us-west-2"                     : { "TEST" : "ami-9fc29baf", "NAT" : "ami-bb69128b" },
        "ap-southeast-1"                : { "TEST" : "ami-58ba910a", "NAT" : "ami-b082dae2" },
        "ap-southeast-2"                : { "TEST" : "ami-1500742f", "NAT" : "ami-b972dba4" },
        "sa-east-1"                     : { "TEST" : "ami-fd9925e0", "NAT" : "ami-b972dba4" },
        "eu-central-1"                  : { "TEST" : "ami-0600331b", "NAT" : "ami-204c7a3d" }
    }
  },

  "Resources" : {

    "ec2VPC" : {
      "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] },
          "EnableDnsSupport"            : "true",
          "EnableDnsHostnames"          : "true",
          "InstanceTenancy"             :"default",
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "vpc"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2InternetGW" : {
      "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "igw"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "InternetGatewayId"           : { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2Public1SubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "Public1", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"                : [ "0", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "public-az1"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2Public1SubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "Public2", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"                : [ "1", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "public-az2"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2Private1SubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "Private1", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"                : [ "0", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "private-az1"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2Private1SubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
          "CidrBlock"                   : { "Fn::FindInMap" : [ "SubnetConfig", "Private2", "CIDR" ] },
          "AvailabilityZone" : { 
            "Fn::Select"                : [ "1", { "Fn::GetAZs" : "" } ]
          },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "private-az2"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2Public1RouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "public-rtb"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2Private1RouteTableAZ1" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "private-rtb-az1"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },
    "ec2Private1RouteTableAZ2" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "private-rtb-az2"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2InternetRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2Public1RouteTable", "ec2InternetGW" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2Public1RouteTable" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "GatewayId"                   : { "Ref" : "ec2InternetGW" }
        }
    },
    "ec2Pri1NATRouteAZ1" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2Private1RouteTableAZ1", "ec2NATInstanceAZ1" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2Private1RouteTableAZ1" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "InstanceId"                   : { "Ref" : "ec2NATInstanceAZ1" }
      }
    },
    "ec2Pri1NATRouteAZ2" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2Private1RouteTableAZ2", "ec2NATInstanceAZ2" ],
        "Properties" : {
          "RouteTableId"                : { "Ref" : "ec2Private1RouteTableAZ2" },
          "DestinationCidrBlock"        : "0.0.0.0/0",
          "InstanceId"                   : { "Ref" : "ec2NATInstanceAZ2" }
      }
    },

    "ec2Public1SubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ1" },
          "RouteTableId"                : { "Ref" : "ec2Public1RouteTable" }
      }
    },
    "ec2Public1SubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId"                      : { "Ref" : "ec2Public1SubnetAZ2" },
        "RouteTableId"                  : { "Ref" : "ec2Public1RouteTable" }
      }
    },
    "ec2Private1SubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Private1SubnetAZ1" },
          "RouteTableId"                : { "Ref" : "ec2Private1RouteTableAZ1" }
      }
    },
    "ec2Private1SubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId"                      : { "Ref" : "ec2Private1SubnetAZ2" },
        "RouteTableId"                  : { "Ref" : "ec2Private1RouteTableAZ2" }
      }
    },

    "ec2Public1SubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "public-acl"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2Public1SubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : [ "ec2Public1SubnetNetworkAcl" ],
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2Public1SubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2Public1SubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : [ "ec2Public1SubnetNetworkAcl" ],
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2Public1SubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },

    "ec2Public1SubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : [ "ec2Public1SubnetNetworkAcl" ],
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ1" },
          "NetworkAclId"                : { "Ref" : "ec2Public1SubnetNetworkAcl" }
      }
    },
    "ec2Public1SubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : [ "ec2Public1SubnetNetworkAcl" ],
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ2" },
          "NetworkAclId"                : { "Ref" : "ec2Public1SubnetNetworkAcl" }
      }
    },

    "ec2Private1SubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"                       : { "Ref" : "ec2VPC" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "private-acl"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2Private1SubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : [ "ec2Private1SubnetNetworkAcl" ],
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "false",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },
    "ec2Private1SubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : [ "ec2Private1SubnetNetworkAcl" ],
        "Properties" : {
          "NetworkAclId"                : { "Ref" : "ec2Private1SubnetNetworkAcl" },
          "RuleNumber"                  : "100",
          "Protocol"                    : "-1",
          "RuleAction"                  : "allow",
          "Egress"                      : "true",
          "CidrBlock"                   : "0.0.0.0/0"
        }
    },

    "ec2Private1SubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : [ "ec2Private1SubnetNetworkAcl" ],
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Private1SubnetAZ1" },
          "NetworkAclId"                : { "Ref" : "ec2Private1SubnetNetworkAcl" }
      }
    },
    "ec2Private1SubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : [ "ec2Private1SubnetNetworkAcl" ],
        "Properties" : {
          "SubnetId"                    : { "Ref" : "ec2Private1SubnetAZ2" },
          "NetworkAclId"                : { "Ref" : "ec2Private1SubnetNetworkAcl" }
      }
    },
    "ec2TestSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription"            : "Security group for our test instance.",
          "VpcId"                       : {"Ref" : "ec2VPC"},
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "test-sg"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ],
        "SecurityGroupIngress" : [
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "22",
          "ToPort"                      : "22",
          "CidrIp"                      : { "Ref": "cSSHFrom" }
          }
        ]
      }
    },
    "ec2NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "DependsOn" : [ "ec2TestSecurityGroup" ],
        "Properties" : {
          "GroupDescription"            : "Security group for our NAT instances.",
          "VpcId"                       : {"Ref" : "ec2VPC"},
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "nat-sg"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ],
        "SecurityGroupIngress" : [
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "443",
          "ToPort"                      : "443",
          "CidrIp"                      : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
          },
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "80",
          "ToPort"                      : "80",
          "CidrIp"                      : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
          },
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "22",
          "ToPort"                      : "22",
          "SourceSecurityGroupId"       : { "Ref" : "ec2TestSecurityGroup" }
          }
        ],
        "SecurityGroupEgress" : [
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "443",
          "ToPort"                      : "443",
          "CidrIp"                      : "0.0.0.0/0"
          },
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "80",
          "ToPort"                      : "80",
          "CidrIp"                      : "0.0.0.0/0"
          }
        ]
      }
    },

    "ec2TestInstanceAZ1" : {
      "Type" : "AWS::EC2::Instance",
        "Properties" : {
          "AvailabilityZone"            : { "Fn::GetAtt" : [ "ec2Public1SubnetAZ1", "AvailabilityZone" ] },
          "ImageId"                     : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "TEST" ] },
          "InstanceType"                : { "Ref" : "aTestInstanceType" },
          "Monitoring"                  : "false",
          "KeyName"                     : { "Ref" : "bUserKeys" },
          "NetworkInterfaces"           : [ {
              "DeviceIndex"             : "0",
              "GroupSet"                : [ { "Ref" : "ec2TestSecurityGroup" } ],
              "SubnetId"                : { "Ref" : "ec2Public1SubnetAZ1" },
              "AssociatePublicIpAddress": "true"
        } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "test-instance"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2eniAZ1" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "DependsOn" : [ "ec2NATSecurityGroup", "ec2Public1SubnetAZ1" ],
        "Properties" : {
          "Description"                 : "NAT interface",
          "GroupSet"                    : [ { "Ref" : "ec2NATSecurityGroup" } ],
          "SourceDestCheck"             : "false",
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ1" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "nat-eni-az1"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2IPAddressNAT1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2EIPAssocAZ1" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "DependsOn" : [ "ec2eniAZ1", "ec2IPAddressNAT1" ],
      "Properties" : {
        "AllocationId"                  : { "Fn::GetAtt" : [ "ec2IPAddressNAT1", "AllocationId" ] },
        "NetworkInterfaceId"            : { "Ref" : "ec2eniAZ1" }
      }
    },

    "ec2NATInstanceAZ1" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "ec2eniAZ1" ],
        "Properties" : {
          "AvailabilityZone"            : { "Fn::GetAtt" : [ "ec2Public1SubnetAZ1", "AvailabilityZone" ] },
          "ImageId"                     : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "NAT" ] },
          "InstanceType"                : { "Ref" : "dNATInstanceType" },
          "Tenancy"                     : "default",
          "Monitoring"                  : "true",
          "DisableApiTermination"       : "true",
          "KeyName"                     : { "Ref" : "bUserKeys" },
          "NetworkInterfaces"           : [ {
              "DeleteOnTermination"     : "false",
              "DeviceIndex"             : "0",
              "NetworkInterfaceId"      : { "Ref" : "ec2eniAZ1" }
        } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "nat-az1"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2eniAZ2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "DependsOn" : [ "ec2NATSecurityGroup", "ec2Public1SubnetAZ2" ],
        "Properties" : {
          "Description"                 : "NAT interface",
          "GroupSet"                    : [ { "Ref" : "ec2NATSecurityGroup" } ],
          "SourceDestCheck"             : "false",
          "SubnetId"                    : { "Ref" : "ec2Public1SubnetAZ2" },
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "nat-eni-az2"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "ec2IPAddressNAT2" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2EIPAssocAZ2" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "DependsOn" : [ "ec2eniAZ2", "ec2IPAddressNAT2" ],
      "Properties" : {
        "AllocationId"                  : { "Fn::GetAtt" : [ "ec2IPAddressNAT2", "AllocationId" ] },
        "NetworkInterfaceId"            : { "Ref" : "ec2eniAZ2" }
      }
    },

    "ec2NATInstanceAZ2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "ec2eniAZ2" ],
        "Properties" : {
          "AvailabilityZone"            : { "Fn::GetAtt" : [ "ec2Public1SubnetAZ2", "AvailabilityZone" ] },
          "ImageId"                     : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "NAT" ] },
          "InstanceType"                : { "Ref" : "dNATInstanceType" },
          "Tenancy"                     : "default",
          "Monitoring"                  : "true",
          "DisableApiTermination"       : "true",
          "KeyName"                     : { "Ref" : "bUserKeys" },
          "NetworkInterfaces"           : [ {
              "DeleteOnTermination"     : "false",
              "DeviceIndex"             : "0",
              "NetworkInterfaceId"      : { "Ref" : "ec2eniAZ2" }
        } ],
        "Tags": [
          { "Key": "Name", "Value": { "Fn::Join" : [ "-", 
            [
                  { "Fn::FindInMap" : [ "TagConv", "Name", "VALUE" ] },
                  "nat-az2"
            ] ] }
          },
          { "Key": "Stack", "Value": { "Ref" : "AWS::StackName" } }
        ]
      }
    },

    "cfnElastiCache" : {
      "Type" : "AWS::CloudFormation::Stack",
        "Properties" : {
          "TemplateURL"                 : "https://s3-us-west-2.amazonaws.com/toddm92/public/templates/cfn/elasticache-template.json",
          "Parameters" : {
            "CacheNodeType"            : "cache.t1.micro",
            "NumberOfCacheNodes"       : "3",
            "CachePort"                : "11211",
            "VPCId"                    : { "Ref" : "ec2VPC" },
            "CacheSubnets"             : { "Fn::Join" : [ ",",
                                            [
                                              { "Ref" : "ec2Private1SubnetAZ1" },
                                              { "Ref" : "ec2Private1SubnetAZ2" }
                                            ]
                                          ] },
            "TestSecurityGroup"        : { "Ref" : "ec2TestSecurityGroup" }
          }
        }
    }
  },

  "Outputs" : {

    "VPCId" : {
      "Description"                     : "VPC Id",
      "Value"                           : { "Ref" : "ec2VPC" }
    },
    "NatIPAZ1" : {
      "Description"                     : "NAT-AZ1 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2NATInstanceAZ1" }, "is",
                                              { "Fn::GetAtt" : [ "ec2NATInstanceAZ1", "PublicIp" ] }
                                            ]
                                          ] }
    },
    "NatIPAZ2" : {
      "Description"                     : "NAT-AZ2 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2NATInstanceAZ2" }, "is",
                                              { "Fn::GetAtt" : [ "ec2NATInstanceAZ2", "PublicIp" ] }
                                            ]
                                          ] }
    },
    "Pub1SubnetAZ1" : {
      "Description"                     : "Public Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2Public1SubnetAZ1" }, "in",
                                              { "Fn::GetAtt" : [ "ec2Public1SubnetAZ1", "AvailabilityZone" ] }
                                            ]
                                          ] }
    },
    "Pub1SubnetAZ2" : {
      "Description"                     : "Public Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2Public1SubnetAZ2" }, "in",
                                              { "Fn::GetAtt" : [ "ec2Public1SubnetAZ2", "AvailabilityZone" ] }
                                            ]
                                          ] }
    },
    "Pri1SubnetAZ1" : {
      "Description"                     : "Private Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2Private1SubnetAZ1" }, "in",
                                              { "Fn::GetAtt" : [ "ec2Private1SubnetAZ1", "AvailabilityZone" ] }
                                            ]
                                          ] }
    },
    "Pri1SubnetAZ2" : {
      "Description"                     : "Private Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2Private1SubnetAZ2" }, "in",
                                              { "Fn::GetAtt" : [ "ec2Private1SubnetAZ2", "AvailabilityZone" ] }
                                            ]
                                          ] }
    }
  }
}
