{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description"	: "Creates a VPC with Managed NAT instances in 2 availability-zones, 4-6 subnets (optional Db subnet tier).",

  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
    "ParameterGroups" : [
      {
        "Label"                         : { "default" : "Network Config" },
        "Parameters"                    : [ "VPCCIDRBlock", "PublicSubnetAZ1", "PublicSubnetAZ2", "PrivateSubnetAZ1", "PrivateSubnetAZ2" ]
      },
      {
        "Label"                         : { "default" : "Database Subnet Option" },
        "Parameters"                    : [ "PrivateDBSubnetAZ1", "PrivateDBSubnetAZ2" ]
      },
      {
        "Label"                         : { "default" : "Tagging" },
        "Parameters"                    : [ "OwnerService", "StackEnv" ]
      },
      {
        "Label"                         : { "default" : "NAT Instance Config" },
        "Parameters"                    : [ "InstanceType", "UserKeys", "SSHFrom" ]
      }
    ],
    "ParameterLabels" : {
        "VPCCIDRBlock"                  : { "default" : "CIDR block for the VPC" },
        "PublicSubnetAZ1"               : { "default" : "Public subnet for AZ1" },
        "PublicSubnetAZ2"               : { "default" : "Public subnet for AZ2" },
        "PrivateSubnetAZ1"              : { "default" : "Private subnet for AZ1" },
        "PrivateSubnetAZ2"              : { "default" : "Private subnet for AZ2" },
        "PrivateDBSubnetAZ1"            : { "default" : "Database subnet for AZ1" },
        "PrivateDBSubnetAZ2"            : { "default" : "Database subnet for AZ2" },
        "OwnerService"                  : { "default" : "Service name" },
        "StackEnv"                      : { "default" : "Environment name" },
        "InstanceType "                 : { "default" : "Instance type" },
        "UserKeys"                      : { "default" : "PEM keys" },
        "SSHFrom"                       : { "default" : "SSH access from IP/CIDR" }
      }
    }
  },

  "Parameters" : {
    "VPCCIDRBlock" : {
        "Type"				: "String",
        "Default"			: "10.79.0.0/23",
        "Description"			: "Enter your VPC IP CIDR block.",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnetAZ1" : {
        "Type"				: "String",
        "Default"			: "10.79.0.0/26",
        "Description"			: "IP space for Public subnet in availability zone-1.",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnetAZ2" : {
        "Type"				: "String",
        "Default"			: "10.79.0.64/26",
        "Description"			: "IP space for Public subnet in availability zone-2.",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PrivateSubnetAZ1" : {
        "Type"				: "String",
        "Default"			: "10.79.1.0/25",
        "Description"			: "IP space for Private subnet in availability zone-1.",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PrivateSubnetAZ2" : {
        "Type"				: "String",
        "Default"			: "10.79.1.128/25",
        "Description"			: "IP space for Private subnet in availability zone-2.",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PrivateDBSubnetAZ1" : {
        "Type"				: "String",
        "Default"			: "na",
        "Description"			: "(Optional) IP space for Private/DB subnet in availability zone-1. (Enter 'na' if not desired)",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "PrivateDBSubnetAZ2" : {
        "Type"				: "String",
        "Default"			: "na",
        "Description"			: "(Optional) IP space for Private/DB subnet for availability zone-2. (Enter 'na' if not desired)",
        "AllowedPattern"		: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})|na",
        "ConstraintDescription"		: "Please enter a valid IP CIDR range of the form x.x.x.x/x or 'na'."
    },
    "InstanceType" : {
        "Type"                          : "String",
        "Default"                       : "c3.2xlarge",
        "AllowedValues"                 : [ "t2.small","t2.medium","m4.large","m4.xlarge","m4.2xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","c3.large","c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge" ],
        "Description"                   : "NAT instance size. Note: For enhanced networking, choose a c4, c3, r3 or i2 class instance."
    },
    "UserKeys" : {
        "Type"                          : "AWS::EC2::KeyPair::KeyName",
        "Description"                   : "NAT instance SSH PEM key name."
    },
    "SSHFrom" : {
        "Type"                          : "String",
        "Default"                       : "10.10.10.0/24",
        "Description"                   : "SSH access to the public subnets.  Used to update the network access control list.",
        "AllowedPattern"                : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription"         : "Please enter a valid CIDR range of the form x.x.x.x/x."
    },
    "OwnerService" : {
        "Type"				: "String",
        "Default"			: "cloudteam",
        "Description"			: "Owner or service name. (For tagging, use lowercase, no spaces, dashes ok.)",
        "AllowedPattern"		: "[-a-z0-9]*",
        "ConstraintDescription"		: "Must be lowercase, no spaces, dashes ok."
    },
    "StackEnv" : {
        "Type"				: "String",
        "Default"			: "stage",
        "Description"			: "Environment name; prod, stage, dev, etc. (For tagging, use lowercase, no spaces, dashes ok.)",
        "AllowedPattern"		: "[-a-z0-9]*",
        "ConstraintDescription"		: "Must be lowercase, no spaces, dashes ok."
    }
  },

  "Conditions" : {

    "PriDBSubAZ1" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "PrivateDBSubnetAZ1" }, "na" ] } ]
    },
    "PriDBSubAZ2" : {
        "Fn::Not" : [ { "Fn::Equals" : [ { "Ref" : "PrivateDBSubnetAZ2" }, "na" ] } ]
    },
    "AnyPriDBSub" : {
        "Fn::Or" : [ { "Condition" : "PriDBSubAZ1" }, { "Condition" : "PriDBSubAZ2" } ]
    }
  },

  "Mappings" : {

    "RegionMap": {
        "us-east-1"			: { "Abbr" : "ue1", "HVM" : "ami-4c9e4b24" },
        "eu-west-1"			: { "Abbr" : "ew1", "HVM" : "ami-3760b040" },
        "ap-northeast-1"		: { "Abbr" : "an1", "HVM" : "ami-55c29e54" },
        "us-west-1"			: { "Abbr" : "uw1", "HVM" : "ami-2b2b296e" },
        "us-west-2"			: { "Abbr" : "uw2", "HVM" : "ami-bb69128b" },
        "ap-southeast-1"		: { "Abbr" : "as1", "HVM" : "ami-b082dae2" },
        "ap-southeast-2"		: { "Abbr" : "as2", "HVM" : "ami-996402a3" },
        "sa-east-1"			: { "Abbr" : "se1", "HVM" : "ami-b972dba4" },
        "eu-central-1"			: { "Abbr" : "ec1", "HVM" : "ami-204c7a3d" }
    }
  },

  "Resources" : {
    "ec2VPC" : {
      "Type" : "AWS::EC2::VPC",
        "Properties" : {
          "CidrBlock"			: { "Ref" : "VPCCIDRBlock" },
          "EnableDnsSupport"		: "true",
          "EnableDnsHostnames"		: "true",
          "InstanceTenancy"		: "default",
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "vpc",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2InternetGW" : {
      "Type" : "AWS::EC2::InternetGateway",
        "Properties" : {
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "igw",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "InternetGatewayId"		: { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2PublicSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "PublicSubnetAZ1" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "0", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-az1",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2PublicSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "PublicSubnetAZ2" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "1", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-az2",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PrivateSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "PrivateSubnetAZ1" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "0", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-az1",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2PrivateSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "PrivateSubnetAZ2" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "1", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-az2",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PrivateDbSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "PriDBSubAZ1",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "PrivateDBSubnetAZ1" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "0", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "privatedb-az1",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2PrivateDbSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Condition" : "PriDBSubAZ2",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
          "CidrBlock"			: { "Ref" : "PrivateDBSubnetAZ2" },
          "AvailabilityZone" : { 
            "Fn::Select"		: [ "1", { "Fn::GetAZs": "" } ]
          },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "privatedb-az2",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-rtb",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PrivateRouteTableAZ1" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-rtb1",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2PrivateRouteTableAZ2" : {
      "Type" : "AWS::EC2::RouteTable",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-rtb2",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PrivateDbRouteTableAZ1" : {
      "Type" : "AWS::EC2::RouteTable",
      "Condition" : "PriDBSubAZ1",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "privatedb-rtb1",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },
    "ec2PrivateDbRouteTableAZ2" : {
      "Type" : "AWS::EC2::RouteTable",
      "Condition" : "PriDBSubAZ2",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "privatedb-rtb2",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PubDefaultRoute" : {
      "Type" : "AWS::EC2::Route",
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PublicRouteTable" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "GatewayId"			: { "Ref" : "ec2InternetGW" }
      }
    },

    "ec2PriDefaultRouteAZ1" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2NATInstanceAZ1" ],
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ1" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "InstanceId"                   : { "Ref" : "ec2NATInstanceAZ1" }
      }
    },
    "ec2PriDefaultRouteAZ2" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "ec2NATInstanceAZ2" ],
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ2" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "InstanceId"                   : { "Ref" : "ec2NATInstanceAZ2" }
      }
    },
    "ec2PriDbDefaultRouteAZ1" : {
      "Type" : "AWS::EC2::Route",
      "Condition" : "PriDBSubAZ1",
      "DependsOn" : [ "ec2NATInstanceAZ1" ],
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PrivateDbRouteTableAZ1" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "InstanceId"                   : { "Ref" : "ec2NATInstanceAZ1" }
      }
    },
    "ec2PriDbDefaultRouteAZ2" : {
      "Type" : "AWS::EC2::Route",
      "Condition" : "PriDBSubAZ2",
      "DependsOn" : [ "ec2NATInstanceAZ2" ],
        "Properties" : {
          "RouteTableId"		: { "Ref" : "ec2PrivateDbRouteTableAZ2" },
          "DestinationCidrBlock"	: "0.0.0.0/0",
          "InstanceId"                   : { "Ref" : "ec2NATInstanceAZ2" }
      }
    },

    "ec2PublicSubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ1" },
          "RouteTableId"		: { "Ref" : "ec2PublicRouteTable" }
      }
    },
    "ec2PublicSubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ2" },
          "RouteTableId"		: { "Ref" : "ec2PublicRouteTable" }
      }
    },

    "ec2PrivateSubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ1" },
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ1" }
      }
    },
    "ec2PrivateSubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ2" },
          "RouteTableId"		: { "Ref" : "ec2PrivateRouteTableAZ2" }
      }
    },

    "ec2PrivateDbSubnetRouteTableAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "PriDBSubAZ1",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateDbSubnetAZ1" },
          "RouteTableId"		: { "Ref" : "ec2PrivateDbRouteTableAZ1" }
      }
    },
    "ec2PrivateDbSubnetRouteTableAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Condition" : "PriDBSubAZ2",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateDbSubnetAZ2" },
          "RouteTableId"		: { "Ref" : "ec2PrivateDbRouteTableAZ2" }
      }
    },

    "ec2PublicSubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "public-acl",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PublicSubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PublicSubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "443", "To" : "443" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryIn300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "80", "To" : "80" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryIn400" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "400",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryIn500" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "500",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "22", "To" : "22" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: { "Ref" : "SSHFrom" }
        }
    },
    "ec2PublicSubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PublicSubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "443", "To" : "443" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PublicSubnetAclEntryOut400" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" },
          "RuleNumber"			: "400",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "80", "To" : "80" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2PublicSubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ1" },
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" }
      }
    },
    "ec2PublicSubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PublicSubnetAZ2" },
          "NetworkAclId"		: { "Ref" : "ec2PublicSubnetNetworkAcl" }
      }
    },

    "ec2PrivateSubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "private-acl",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PrivateSubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PrivateSubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateSubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PrivateSubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "443", "To" : "443" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateSubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "80", "To" : "80" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2PrivateDbSubnetNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "VpcId"			: { "Ref" : "ec2VPC" },
        "Tags": [
            {
                "Key"			: "Stack",
                "Value"			: { "Ref" : "AWS::StackName" }
            },
            {
                "Key"			: "Name",
                "Value"			: {
						"Fn::Join" : [
						"-",
						  [
						    { "Ref" : "OwnerService" },
						    { "Ref" : "StackEnv" },
						     "privatedb-acl",
						    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
						  ]
						]
					}
            }
        ]
      }
    },

    "ec2PrivateDbSubnetAclEntryIn100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PrivateDbSubnetAclEntryIn200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "3306", "To" : "3306" },
          "RuleAction"			: "deny",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryIn300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "6379", "To" : "6379" },
          "RuleAction"			: "deny",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryIn400" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"			: "400",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "11211", "To" : "11211" },
          "RuleAction"			: "deny",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryIn500" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"			: "500",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "1024", "To" : "65535" },
          "RuleAction"			: "allow",
          "Egress"			: "false",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryOut100" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"			: "100",
          "Protocol"			: "-1",
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: { "Ref" : "VPCCIDRBlock" }
        }
    },
    "ec2PrivateDbSubnetAclEntryOut200" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"			: "200",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "443", "To" : "443" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },
    "ec2PrivateDbSubnetAclEntryOut300" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Condition" : "AnyPriDBSub",
        "Properties" : {
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" },
          "RuleNumber"			: "300",
          "Protocol"			: "6",
          "PortRange"			: { "From" : "80", "To" : "80" },
          "RuleAction"			: "allow",
          "Egress"			: "true",
          "CidrBlock"			: "0.0.0.0/0"
        }
    },

    "ec2PrivateSubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ1" },
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" }
      }
    },
    "ec2PrivateSubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateSubnetAZ2" },
          "NetworkAclId"		: { "Ref" : "ec2PrivateSubnetNetworkAcl" }
      }
    },

    "ec2PrivateDbSubnetNetworkAclAssocAZ1" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "PriDBSubAZ1",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateDbSubnetAZ1" },
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" }
      }
    },
    "ec2PrivateDbSubnetNetworkAclAssocAZ2" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Condition" : "PriDBSubAZ2",
        "Properties" : {
          "SubnetId"			: { "Ref" : "ec2PrivateDbSubnetAZ2" },
          "NetworkAclId"		: { "Ref" : "ec2PrivateDbSubnetNetworkAcl" }
      }
    },

    "ec2NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription"            : "Security group for our NAT instances.",
          "VpcId"                       : {"Ref" : "ec2VPC"},
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "natsg",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ],
        "SecurityGroupIngress" : [
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "443",
          "ToPort"                      : "443",
          "CidrIp"                      : { "Ref" : "VPCCIDRBlock" }
          },
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "80",
          "ToPort"                      : "80",
          "CidrIp"                      : { "Ref" : "VPCCIDRBlock" }
          },
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "22",
          "ToPort"                      : "22",
          "CidrIp"                      : { "Ref" : "SSHFrom" }
          }
        ],
        "SecurityGroupEgress" : [
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "443",
          "ToPort"                      : "443",
          "CidrIp"                      : "0.0.0.0/0"
          },
          {
          "IpProtocol"                  : "tcp",
          "FromPort"                    : "80",
          "ToPort"                      : "80",
          "CidrIp"                      : "0.0.0.0/0"
          }
        ]
      }
    },

    "ec2eniAZ1" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "DependsOn" : [ "ec2NATSecurityGroup", "ec2PublicSubnetAZ1" ],
      "Properties" : {
        "Description"                   : "NAT interface",
        "GroupSet"                      : [ { "Ref" : "ec2NATSecurityGroup" } ],
        "SourceDestCheck"               : "false",
        "SubnetId"                      : { "Ref" : "ec2PublicSubnetAZ1" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "eni1",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2IPAddressNAT1" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2EIPAssocAZ1" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "DependsOn" : [ "ec2eniAZ1", "ec2IPAddressNAT1" ],
      "Properties" : {
        "AllocationId"                  : { "Fn::GetAtt" : [ "ec2IPAddressNAT1", "AllocationId" ] },
        "NetworkInterfaceId"            : { "Ref" : "ec2eniAZ1" }
      }
    },

    "ec2NATInstanceAZ1" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "ec2eniAZ1" ],
      "Properties" : {
        "AvailabilityZone"              : { "Fn::GetAtt" : [ "ec2PublicSubnetAZ1", "AvailabilityZone" ] },
        "ImageId"                       : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "HVM" ] },
        "InstanceType"                  : { "Ref" : "InstanceType" },
        "Tenancy"                       : "default",
        "Monitoring"                    : "true",
        "DisableApiTermination"         : "true",
        "KeyName"                       : { "Ref" : "UserKeys" },
        "NetworkInterfaces"             : [ {
              "DeleteOnTermination"     : "false",
              "DeviceIndex"             : "0",
              "NetworkInterfaceId"      : { "Ref" : "ec2eniAZ1" }
        } ],
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "nat1",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2eniAZ2" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "DependsOn" : [ "ec2NATSecurityGroup", "ec2PublicSubnetAZ2" ],
      "Properties" : {
        "Description"                   : "NAT interface",
        "GroupSet"                      : [ { "Ref" : "ec2NATSecurityGroup" } ],
        "SourceDestCheck"               : "false",
        "SubnetId"                      : { "Ref" : "ec2PublicSubnetAZ2" },
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "eni2",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    },

    "ec2IPAddressNAT2" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain"                        : "vpc"
      }
    },
    "ec2EIPAssocAZ2" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "DependsOn" : [ "ec2eniAZ2", "ec2IPAddressNAT2" ],
      "Properties" : {
        "AllocationId"                  : { "Fn::GetAtt" : [ "ec2IPAddressNAT2", "AllocationId" ] },
        "NetworkInterfaceId"            : { "Ref" : "ec2eniAZ2" }
      }
    },

    "ec2NATInstanceAZ2" : {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "ec2eniAZ2" ],
      "Properties" : {
        "AvailabilityZone"              : { "Fn::GetAtt" : [ "ec2PublicSubnetAZ2", "AvailabilityZone" ] },
        "ImageId"                       : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "HVM" ] },
        "InstanceType"                  : { "Ref" : "InstanceType" },
        "Tenancy"                       : "default",
        "Monitoring"                    : "true",
        "DisableApiTermination"         : "true",
        "KeyName"                       : { "Ref" : "UserKeys" },
        "NetworkInterfaces"             : [ {
              "DeleteOnTermination"     : "false",
              "DeviceIndex"             : "0",
              "NetworkInterfaceId"      : { "Ref" : "ec2eniAZ2" }
        } ],
        "Tags": [
            {
                "Key"                   : "Stack",
                "Value"                 : { "Ref" : "AWS::StackName" }
            },
            {
                "Key"                   : "Name",
                "Value"                 : {
                                                "Fn::Join" : [
                                                "-",
                                                  [
                                                    { "Ref" : "OwnerService" },
                                                    { "Ref" : "StackEnv" },
                                                     "nat2",
                                                    { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "Abbr" ] }
                                                  ]
                                                ]
                                        }
            }
        ]
      }
    }
  },

  "Outputs" : {

    "VPCId" : {
      "Description"                     : "VPC Id",
      "Value"                           : { "Ref" : "ec2VPC" }
    },

    "NatIPAZ1" : {
      "Description"                     : "NAT-AZ1 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2NATInstanceAZ1" }, "is",
                                              { "Fn::GetAtt" : [ "ec2NATInstanceAZ1", "PublicIp" ] }
                                            ]
                                          ] }
    },
    "NatIPAZ2" : {
      "Description"                     : "NAT-AZ2 Public IP",
      "Value"                           : { "Fn::Join" : [ " ",
                                            [
                                              { "Ref" : "ec2NATInstanceAZ2" }, "is",
                                              { "Fn::GetAtt" : [ "ec2NATInstanceAZ2", "PublicIp" ] }
                                            ]
                                          ] }
    },

    "PubSubnetAZ1" : {
      "Description"                     : "Public Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PublicSubnetAZ1" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PublicSubnetAZ1", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PubSubnetAZ2" : {
      "Description"                     : "Public Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PublicSubnetAZ2" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PublicSubnetAZ2", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PriSubnetAZ1" : {
      "Description"                     : "Private Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PrivateSubnetAZ1" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PrivateSubnetAZ1", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PriSubnetAZ2" : {
      "Description"                     : "Private Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PrivateSubnetAZ2" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PrivateSubnetAZ2", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PriDBSubnetAZ1" : {
      "Condition" : "PriDBSubAZ1",
      "Description"                     : "Private/DB Subnet Id for AZ1",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PrivateDbSubnetAZ1" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PrivateDbSubnetAZ1", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    },
    "PriDBSubnetAZ2" : {
    "Condition" : "PriDBSubAZ2",
      "Description"                     : "Private/DB Subnet Id for AZ2",
      "Value"                           : { "Fn::Join" : [ " ",
                                                  [
                                                    { "Ref" : "ec2PrivateDbSubnetAZ2" }, "in",
                                                    { "Fn::GetAtt" : [ "ec2PrivateDbSubnetAZ2", "AvailabilityZone" ] }
                                                  ]
                                                ] }
    }
  }
}
